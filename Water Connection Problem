With DSU

struct DSU {
    vector<int> parent, size;
    
    DSU(int n) {
        parent.resize(n + 1);
        size.resize(n + 1, 1);
        for (int i = 1; i <= n; ++i) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        if (x != parent[x]) {
            parent[x] = find(parent[x]);  // Path compression
        }
        return parent[x];
    }
    
    void unite(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        
        if (rootX != rootY) {
            if (size[rootX] < size[rootY]) {
                swap(rootX, rootY);
            }
            parent[rootY] = rootX;
            size[rootX] += size[rootY];
        }
    }
};

class Solution
{
    public:
    
    vector<vector<int>> solve(int n, int p, vector<int>& a, vector<int>& b, vector<int>& d) {
    DSU dsu(n);
    
    vector<int> outgoing(n + 1, -1), incoming(n + 1, -1);
    vector<int> min_diameter(n + 1, INT_MAX);
    
    // Track outgoing, incoming pipes and union the sets
    for (int i = 0; i < p; ++i) {
        int u = a[i], v = b[i], diam = d[i];
        dsu.unite(u, v);
        outgoing[u] = v;
        incoming[v] = u;
        min_diameter[dsu.find(u)] = min(min_diameter[dsu.find(u)], diam);
    }
    
    // Find tanks and taps
    vector<vector<int>> result;
    for (int i = 1; i <= n; ++i) {
        if (outgoing[i] != -1 && incoming[i] == -1) {  // Starting point (Tank)
            int start = i;
            int end = start;
            int min_diam = min_diameter[dsu.find(start)];
            
            while (outgoing[end] != -1) {  // Traverse till the last house in the chain
                end = outgoing[end];
            }
            
            result.push_back({start, end, min_diam});
        }
    }
    
    // Sort based on the house number containing the tank
    sort(result.begin(), result.end());
    
    return result;
}
};



With DFS

class Solution
{
    public:
    
    // number of houses and number
    // of pipes
    int n, p;

    // Array rd stores the
    // ending vertex of pipe
    vector<int> rd;

    // Array wd stores the value
    // of diameters between two pipes
    vector<int> wt;

    // Array cd stores the
    // starting end of pipe
    vector<int> cd;


    int ans;

    int dfs(int w)
    {
    	if (cd[w] == 0)
    		return w;
    	if (wt[w] < ans)
    		ans = wt[w];
    	return dfs(cd[w]);
    }

    vector<vector<int>> solve(int n,int p,vector<int> a,vector<int> b,vector<int> d)
    {
        this->n=n;
        this->p=p;
        rd=vector<int>(n+1);
        wt=vector<int>(n+1);
        cd=vector<int>(n+1);
        vector<vector<int>> res;
        
        int i = 0;
       
    	while (i < p) {
    
    		int q = a[i], h = b[i],
    			t = d[i];
    
    		cd[q] = h;
    		wt[q] = t;
    		rd[h] = q;
    		i++;
    	}

        
    	for (int j = 1; j <= n; ++j)
    
    		/*If a pipe has no ending vertex
    		but has starting vertex i.e is
    		an outgoing pipe then we need
    		to start DFS with this vertex.*/
    		if (rd[j] == 0 && cd[j]) {
    			ans = 1000000000;
    			int w = dfs(j);
    
    			// We put the details of component
    			// in final output res array
    			
    			res.push_back({j,w,ans});
    	}
    
        return res;
    }
};
