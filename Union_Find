class DSU{
    public:
        vector<long long int> parent,size;
        DSU(int n){ 
            parent.resize(n+1);
            size.resize(n+1);
            for(int i=0;i<=n;i++){
                parent[i]=i;
                size[i]=1;
            }
        }
        int find(int v){
            if(v==parent[v]){
                return v;
            }
            return parent[v]=find(parent[v]);
        }
        void Union(int a,int b){
            a=find(a);
            b=find(b);
            if(a!=b){
                if(size[a]<size[b]) swap(a,b);
                parent[b]=a;
                size[a]+=size[b]+0LL;
            }
        }
};






Use in CP


int find(ll v,vector<ll> &parent){
    if(v==parent[v]){
        return v;
    }
    return parent[v]=find(parent[v],parent);
}
void Union(ll a,ll b,vector<ll> &size,vector<ll> &parent){
    a=find(a,parent);
    b=find(b,parent);
    if(a!=b){
        if(size[a]<size[b]) swap(a,b);
        parent[b]=a;
        size[a]+=size[b]+0LL;
    }
}

void kunal(){
   ll n,m;
   cin>>n>>m;
   map<ll,vector<ll>> mp;
   vector<ll> parent(m+1,-1),size(m+1,-1);
   for(ll i=0;i<=m;i++){
        parent[i]=i;
        size[i]=1;
    }
    ll ans=0,ans2=0;
   ll i=1;
   while(n--){
    ll sz;
    cin>>sz;
    if(sz==0) ans++;
    ll prev=-1;
    while(sz--){
        ll x;
        cin>>x;
        if(prev!=-1){
            Union(x,prev,size,parent);
        }
        prev=x;
        mp[i].push_back(x);
    }
    i++;
   }
   map<ll,ll> mpp;
   for(auto x:mp){
    //cout<<x.second[0]<<" ";
        ll r=find(x.second[0],parent);
        //cout<<r<<" ";
        mpp[r]++;
   }

   cout<<nl;
   for(auto x:mpp){
    if(x.second>0){
        ans2++;
    }
   }
   if(ans2>0) ans2--;
   //cout<<ans<<" "<<ans2<<nl;
   cout<<ans2+ans<<nl;
}

    struct DSU {
        vector<int>parent,size;
     
        DSU () {}
     
        DSU(int n) {
            for(int i=0;i<=n;i++) parent.push_back(i);
            size.assign(n+1,1);
        }
        
        int find_set(int v) {
            if(parent[v] == v) return v;
            return parent[v] = find_set(parent[v]);
        }
     
        void union_set(int u,int v) {
            u = find_set(u);
            v = find_set(v);
     
            if(v == u) return;
     
            if(size[u] > size[v]) swap(u,v);
            parent[u] = v;
            size[v] += size[u];
        }
    };

