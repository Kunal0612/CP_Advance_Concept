/*********Jai Shree Ram*****************
**        Solution by kunal0612       **
**********Jai Shree Ram****************/
#include <bits/stdc++.h>
#define ll long long int
#define lll unsigned long long
#define yes cout<<"YES"<<endl;
#define no cout<<"NO"<<endl;
#define mod 1000000007
#define nl "\n"
using namespace std;


// the smallest element should be at the 0th index


class priority_Queue{
    private:
    int arr[100005];
    int n;
    public:
    priority_Queue(){
        n=0;
    }
    void push(int val){
        arr[n++]=val;
        upheapify(n-1);
    }
    int pop(){
        if(n==0){
            throw std::out_of_range("Heap is empty");
        }
        swap(arr[0],arr[n-1]);
        int val=arr[n-1];
        n--;
        downheapify(0);
        return val;
    }
    void upheapify(int i){
        int parent = (i-1)/2;
        if(arr[parent]>arr[i]){
            swap(arr[parent],arr[i]);
            upheapify(parent);
        }
    }
    void downheapify(int i){
        int smallest=i;
        int left=i*2 + 1;
        int right=i*2 + 2;
        if(left<n and arr[left]<arr[smallest]){
            smallest=left;
        }
        if(right<n and arr[right]<arr[smallest]){
            smallest=right;
        }
        if(smallest!=i){
            swap(arr[smallest],arr[i]);
            downheapify(smallest);
        }
    }
    int top(){
        if(n==0){
            throw std::out_of_range("Heap is empty");
        }
        return arr[0];
    }
    int isempty(){
        return n==0;
    }
};



int main(){
    priority_Queue pq;
    // pq.push(1);
    // pq.push(10);
    // pq.push(-500);
    // pq.push(15);
    cout<<pq.isempty()<<endl;
    
    pq.push(-5);
    //pq.push(0);
    pq.pop();
    int val=pq.top();
    cout<<val<<endl;
    return 0;
}
