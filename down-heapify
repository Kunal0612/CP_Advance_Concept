#include <iostream>
#include <vector>

using namespace std;

// Function to downheapify a subtree rooted at index `i`
// `n` is the size of the heap
void downheapify(vector<int>& arr, int n, int i) {
    int largest = i;           // Initialize largest as root
    int left = 2 * i + 1;      // Left child
    int right = 2 * i + 2;     // Right child

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // If right child is larger than the current largest
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not the root
    if (largest != i) {
        swap(arr[i], arr[largest]);  // Swap root with largest
        downheapify(arr, n, largest);   // Recursively downheapify the affected subtree
    }
}

// Main function to perform Heap Sort
void heapSort(vector<int>& arr) {
    int n = arr.size();

    // Step 1: Build a max-heap
    for (int i = n / 2 - 1; i >= 0; i--) {
        downheapify(arr, n, i);
    }

    // Step 2: Extract elements from the heap
    for (int i = n - 1; i >= 0; i--) {
        swap(arr[0], arr[i]);       // Move current root to the end
        downheapify(arr, i, 0);         // Call downheapify on the reduced heap
    }
}

// Utility function to print an array
void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

// Driver Code
int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};

    cout << "Original array: ";
    printArray(arr);

    heapSort(arr);

    cout << "Sorted array: ";
    printArray(arr);

    return 0;
}
